"""
Django settings for walletservice project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
from os import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = environ.get('WALLET_SERVICE_SECRET_KEY', default='UNSECURE_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(environ.get('WALLET_SERVICE_DEBUG_MODE', default='False'))

ALLOWED_HOSTS = environ.get('WALLET_SERVICE_ALLOWED_HOSTS', default='*').split(' ')

# Adding CORS configuration to allow queries from other origins
CORS_ALLOWED_ORIGINS = environ.get('WALLET_SERVICE_ALLOWED_ORIGINS', default='http://127.0.0.1:8000').split(' ')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework_swagger',
    'rest_framework.authtoken',
    'rest_framework',
    'corsheaders',
    'users',
    'clients',
    'companies',
    'wallets',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Added by the needed of corsheaders configuration
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'walletservice.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            # Adding the link from staticfiles template tag to static, due the compatibility issue with swagger
            'libraries': {
                'staticfiles': 'django.templatetags.static',
            },
        },
    },
]

WSGI_APPLICATION = 'walletservice.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': environ.get('POSTGRES_DB_NAME'),
        'HOST': environ.get('POSTGRES_DB_HOST'),
        'PORT': environ.get('POSTGRES_DB_PORT'),
        'USER': environ.get('POSTGRES_DB_USERNAME'),
        'PASSWORD': environ.get('POSTGRES_DB_PASSWORD'),
    },
    # 'development': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# User model used by the authentication system, we are overriding the default user for a custom one
AUTH_USER_MODEL = 'users.User'

# DRF Configuration
REST_FRAMEWORK = {
    # Allowing only request from users already authenticated
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated'
    ],
    # Our app will be based in authtokens system, using a custom one
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'users.authentication.ExpiringTokenAuthentication',
    ),
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
    # Needed for Swagger automatic discover
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema'
}

# Swagger Configuration, disabling the session authentication and enabling our Token based authentication
SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False,
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization'
        }
    }
}

# Expiration time for our authentication tokens, in hours
AUTH_TOKEN_EXPIRATION = int(environ.get('WALLET_SERVICE_AUTH_TOKEN_EXPIRATION', default='1'))

# Number of wallets allowed by different profiles, set to 0 to unlimited.
MAX_WALLETS_BY_COMPANY = 1  # It's important to do not change this value, for companies its mandatory to have only one
MAX_WALLETS_BY_CLIENT = int(environ.get('WALLET_SERVICE_MAX_WALLETS_BY_CLIENT', default='1'))

# Logging configuration
LOG_LEVEL = environ.get('WALLET_SERVICE_LOG_LEVEL', 'INFO').upper()

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '{levelname} - {asctime} [{module} {process:d} {thread:d}]: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console'
        },
    },
    'root': {
        'handlers': ['console'],
        'level': LOG_LEVEL,
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
